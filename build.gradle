buildscript {
    ext.kotlinVersion = "1.3.50"

    repositories {
        google()
        mavenCentral()
    }

    configurations.maybeCreate("pitest")
    dependencies {
        classpath("com.android.tools.build:gradle:3.5.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("de.mannodermaus.gradle.plugins:android-junit5:1.7.1.1")
        classpath("com.adarshr:gradle-test-logger-plugin:3.0.0")
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:0.9.18")
        classpath("org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18")
        classpath("digital.wup:android-maven-publish:3.6.2")
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.5")
        pitest("org.pitest:pitest-junit5-plugin:0.9")
    }
}

plugins {
    id("com.github.ben-manes.versions") version "0.25.0"
    id("io.spring.dependency-management") version "1.0.8.RELEASE"
}

allprojects {
    apply from: "$rootDir/.ops/git.gradle"
}

subprojects {
    repositories {
        google()
        mavenCentral()
        jcenter {
            content {
                includeGroup "com.andreapivetta.kolor"
                includeGroup "org.jetbrains.trove4j"
                includeGroup "nl.dionsegijn"
            }
        }
    }

    project.apply from: "$rootDir/dependencies.gradle"

    afterEvaluate { project ->
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
            kotlinOptions {
                freeCompilerArgs += ["-progressive"]
            }
        }

        if (plugins.hasPlugin("com.android.library") || plugins.hasPlugin("com.android.application")) {
            android {
                compileSdkVersion(28)
                defaultConfig {
                    targetSdkVersion(28)

                    versionName = git.versionName()
                    versionCode = git.commitCount()

                    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
                }

                testOptions {
                    unitTests.returnDefaultValues = true
                }

                lintOptions {
                    warningsAsErrors = true
                    textReport = true

                    ignoreTestSources true

                    ignore "ObsoleteLintCustomCheck", "GradleDependency"
                }

                compileOptions {
                    sourceCompatibility 1.8
                    targetCompatibility 1.8
                }

                kotlinOptions {
                    jvmTarget = "1.8"
                }
            }
        }

        if (project.name != "docs" && (project.hasProperty("test") || project.hasProperty("android"))) {
            project.apply from: "$rootDir/.ops/testing.gradle"
            project.apply from: "$rootDir/.ops/pitest.gradle"
        }

        if (project.hasProperty("dokka")) {
            project.apply from: "$rootDir/.ops/dokka.gradle"
        }

        if (project.hasProperty("publishing")) {
            project.apply from: "$rootDir/.ops/publishing.gradle"
        }
    }
}

task clean(type: Delete) {
    delete(rootProject.buildDir)
}

println("Version ${git.versionName()}")
